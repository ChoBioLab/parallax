/*
 * -------------------------------------------------
 *  nf-core/parallax Nextflow base config file
 * -------------------------------------------------
 * A foundational config file defining resource allocation
 * and process configurations for the nf-core/parallax pipeline
 */

params {
    // Maximum resource limits
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
}

// Function to check the maximum available resources
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj as int
        }
    }
}

process {
    // Base defaults
    cpus   = { check_max( 1, 'cpus' ) }
    memory = { check_max( 6.GB, 'memory' ) }
    time   = { check_max( 4.h, 'time' ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Resource labels
    withLabel:process_single {
        cpus   = { check_max( 1, 'cpus' ) }
        memory = { check_max( 6.GB, 'memory' ) }
        time   = { check_max( 4.h, 'time' ) }
    }

    withLabel:process_low {
        cpus   = { check_max( 2, 'cpus' ) }
        memory = { check_max( 12.GB, 'memory' ) }
        time   = { check_max( 6.h, 'time' ) }
    }

    withLabel:process_medium {
        cpus   = { check_max( 6, 'cpus' ) }
        memory = { check_max( 36.GB, 'memory' ) }
        time   = { check_max( 8.h, 'time' ) }
    }

    withLabel:process_high {
        cpus   = { check_max( 12, 'cpus' ) }
        memory = { check_max( 72.GB, 'memory' ) }
        time   = { check_max( 16.h, 'time' ) }
    }

    withLabel:process_long {
        time   = { check_max( 20.h, 'time' ) }
    }

    withLabel:process_high_memory {
        memory = { check_max( 200.GB, 'memory' ) }
    }

    withLabel:process_gpu {
        cpus   = { check_max( 8, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time   = { check_max( 12.h, 'time' ) }

        accelerator = {
            if (params.force_cpu) {
                return null
            }
            def gpu_count = params.num_gpus ?: 1
            return gpu_count > 0 ? [request: gpu_count, type: 'nvidia'] : null
        }

        containerOptions = {
            if (workflow.containerEngine == 'singularity') {
                return '--nv'
            } else if (workflow.containerEngine == 'docker') {
                return '--gpus all'
            }
            return ''
        }

        beforeScript = '''
            # GPU validation and setup
            if command -v nvidia-smi >/dev/null 2>&1; then
                nvidia-smi || echo "Warning: nvidia-smi failed"
                export CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
                export PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
            else
                echo "Warning: nvidia-smi not found, GPU may not be available"
                if [ "${params.force_cpu}" != "true" ]; then
                    echo "Consider setting --force_cpu true to run without GPU"
                fi
            fi
        '''
    }

    withLabel:process_gpu_high {
        cpus   = { check_max( 16, 'cpus' ) }
        memory = { check_max( 128.GB * task.attempt, 'memory' ) }
        time   = { check_max( 48.h, 'time' ) }

        accelerator = {
            if (params.force_cpu) {
                return null
            }
            def gpu_count = params.num_gpus ?: 1
            def max_gpus = params.max_gpus_per_process ?: 4
            def final_count = Math.min(gpu_count, max_gpus)
            return final_count > 0 ? [request: final_count, type: 'nvidia'] : null
        }

        containerOptions = {
            if (workflow.containerEngine == 'singularity') {
                return '--nv'
            } else if (workflow.containerEngine == 'docker') {
                return '--gpus all'
            }
            return ''
        }
    }

    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }

    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

    // Process-specific configurations
    withName:VALIDATE_INPUTS {
        cpus   = { check_max( 2, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time   = { check_max( 1.h, 'time' ) }
        errorStrategy = 'retry'
        maxRetries = 3
    }

    withName:CHECK_DEPENDENCIES {
        cpus   = { check_max( 1, 'cpus' ) }
        memory = { check_max( 2.GB, 'memory' ) }
        time   = { check_max( 30.min, 'time' ) }
    }

    withName:CHECK_GPU_AVAILABILITY {
        cpus   = { check_max( 1, 'cpus' ) }
        memory = { check_max( 2.GB, 'memory' ) }
        time   = { check_max( 10.min, 'time' ) }
    }

    withName:RESOLVI_PREPROCESS {
        cpus   = { check_max( 4, 'cpus' ) }
        memory = { check_max( 16.GB, 'memory' ) }
        time   = { check_max( 4.h, 'time' ) }
    }

    withName:RESOLVI_TRAIN {
        errorStrategy = 'retry'
        maxRetries = 2
    }

    withName:RESOLVI_ANALYZE {
        cpus   = { check_max( 4, 'cpus' ) }
        memory = { check_max( 16.GB, 'memory' ) }
        time   = { check_max( 6.h, 'time' ) }
    }

    withName:RESOLVI_VISUALIZE {
        cpus   = { check_max( 2, 'cpus' ) }
        memory = { check_max( 8.GB, 'memory' ) }
        time   = { check_max( 4.h, 'time' ) }
    }

    withName:SCVIVA_TRAIN {
        cpus   = { check_max( 8, 'cpus' ) }
        memory = { check_max( 64.GB, 'memory' ) }
        time   = { check_max( 12.h, 'time' ) }
        label  = 'process_gpu_high'
    }

    withName:SCVIVA_ANALYZE {
        cpus   = { check_max( 4, 'cpus' ) }
        memory = { check_max( 16.GB, 'memory' ) }
        time   = { check_max( 6.h, 'time' ) }
    }

    withName:get_software_versions {
        cache = false
        cpus   = { check_max( 1, 'cpus' ) }
        memory = { check_max( 2.GB, 'memory' ) }
        time   = { check_max( 30.min, 'time' ) }
    }

    withName:MULTIQC {
        cpus   = { check_max( 1, 'cpus' ) }
        memory = { check_max( 6.GB, 'memory' ) }
        time   = { check_max( 2.h, 'time' ) }
    }
}

